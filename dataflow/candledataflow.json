{
	"name": "candledataflow",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "BNBUSDcandle",
						"type": "DatasetReference"
					},
					"name": "source11"
				},
				{
					"dataset": {
						"referenceName": "BTCUSDcandle",
						"type": "DatasetReference"
					},
					"name": "source12"
				},
				{
					"dataset": {
						"referenceName": "DOGEUSDcandle",
						"type": "DatasetReference"
					},
					"name": "source13"
				},
				{
					"dataset": {
						"referenceName": "ETHUSDcandle",
						"type": "DatasetReference"
					},
					"name": "source14"
				},
				{
					"dataset": {
						"referenceName": "HEXUSDcandle",
						"type": "DatasetReference"
					},
					"name": "source15"
				},
				{
					"dataset": {
						"referenceName": "LTCUSDcandle",
						"type": "DatasetReference"
					},
					"name": "source16"
				},
				{
					"dataset": {
						"referenceName": "SHIBUSDcandle",
						"type": "DatasetReference"
					},
					"name": "source17"
				},
				{
					"dataset": {
						"referenceName": "USDTUSDcandle",
						"type": "DatasetReference"
					},
					"name": "source18"
				},
				{
					"dataset": {
						"referenceName": "XRPUSDcandle",
						"type": "DatasetReference"
					},
					"name": "source19"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "SHIBUSDcandleoutput",
						"type": "DatasetReference"
					},
					"name": "SHIBCandleSink"
				},
				{
					"dataset": {
						"referenceName": "USDTUSDcandleoutput",
						"type": "DatasetReference"
					},
					"name": "USDTCandleSink"
				},
				{
					"dataset": {
						"referenceName": "XRPUSDcandleoutput",
						"type": "DatasetReference"
					},
					"name": "XRPCandleSink"
				},
				{
					"dataset": {
						"referenceName": "LTCUSDcandleoutput",
						"type": "DatasetReference"
					},
					"name": "LTCCandleSink"
				},
				{
					"dataset": {
						"referenceName": "HEXUSDcandleoutput",
						"type": "DatasetReference"
					},
					"name": "HEXCandleSink"
				},
				{
					"dataset": {
						"referenceName": "ETHUSDcandleoutput",
						"type": "DatasetReference"
					},
					"name": "ETHCandleSink"
				},
				{
					"dataset": {
						"referenceName": "DOGEUSDcandleoutput",
						"type": "DatasetReference"
					},
					"name": "DOGECandleSink"
				},
				{
					"dataset": {
						"referenceName": "BTCUSDcandleoutput",
						"type": "DatasetReference"
					},
					"name": "BTCCandleSink"
				},
				{
					"dataset": {
						"referenceName": "BNBUSDcandleoutput",
						"type": "DatasetReference"
					},
					"name": "BNBCandleSink"
				}
			],
			"transformations": [
				{
					"name": "Removedogecoincandlenullvalues"
				},
				{
					"name": "removeethcandlenullvalues"
				},
				{
					"name": "removebinancecandlenullvalues"
				},
				{
					"name": "removebitcoinscandlenullvalues"
				},
				{
					"name": "removehexcandlenullvalues"
				},
				{
					"name": "removelitecoincandlenullvalues"
				},
				{
					"name": "removeshibacandlenullvalues"
				},
				{
					"name": "removetethercandlenullvalues"
				},
				{
					"name": "removexrpcandlenullvalues"
				}
			],
			"scriptLines": [
				"source(output(",
				"          Column_1 as string,",
				"          Column_2 as string,",
				"          Column_3 as string,",
				"          Column_4 as string,",
				"          Column_5 as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source11",
				"source(output(",
				"          Column_1 as string,",
				"          Column_2 as string,",
				"          Column_3 as string,",
				"          Column_4 as string,",
				"          Column_5 as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source12",
				"source(output(",
				"          Column_1 as string,",
				"          Column_2 as string,",
				"          Column_3 as string,",
				"          Column_4 as string,",
				"          Column_5 as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source13",
				"source(output(",
				"          Column_1 as string,",
				"          Column_2 as string,",
				"          Column_3 as string,",
				"          Column_4 as string,",
				"          Column_5 as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source14",
				"source(output(",
				"          Column_1 as string,",
				"          Column_2 as string,",
				"          Column_3 as string,",
				"          Column_4 as string,",
				"          Column_5 as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source15",
				"source(output(",
				"          Column_1 as string,",
				"          Column_2 as string,",
				"          Column_3 as string,",
				"          Column_4 as string,",
				"          Column_5 as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source16",
				"source(output(",
				"          Column_1 as string,",
				"          Column_2 as string,",
				"          Column_3 as string,",
				"          Column_4 as string,",
				"          Column_5 as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source17",
				"source(output(",
				"          Column_1 as string,",
				"          Column_2 as string,",
				"          Column_3 as string,",
				"          Column_4 as string,",
				"          Column_5 as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source18",
				"source(output(",
				"          Column_1 as string,",
				"          Column_2 as string,",
				"          Column_3 as string,",
				"          Column_4 as string,",
				"          Column_5 as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source19",
				"source13 filter(contains(array(toString(columns())),!isNull(Column_1))) ~> Removedogecoincandlenullvalues",
				"source14 filter(contains(array(toString(columns())),!isNull(Column_1))) ~> removeethcandlenullvalues",
				"source11 filter(contains(array(toString(columns())),!isNull(Column_1))) ~> removebinancecandlenullvalues",
				"source12 filter(contains(array(toString(columns())),!isNull(Column_1))) ~> removebitcoinscandlenullvalues",
				"source15 filter(contains(array(toString(columns())),!isNull(Column_1))) ~> removehexcandlenullvalues",
				"source16 filter(contains(array(toString(columns())),!isNull(Column_1))) ~> removelitecoincandlenullvalues",
				"source17 filter(contains(array(toString(columns())),!isNull(Column_1))) ~> removeshibacandlenullvalues",
				"source18 filter(contains(array(toString(columns())),!isNull(Column_1))) ~> removetethercandlenullvalues",
				"source19 filter(contains(array(toString(columns())),!isNull(Column_1))) ~> removexrpcandlenullvalues",
				"removeshibacandlenullvalues sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Column_1 as string,",
				"          Column_2 as string,",
				"          Column_3 as string,",
				"          Column_4 as string,",
				"          Column_5 as string",
				"     ),",
				"     filePattern:'SHIB-USDcandle.csv',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> SHIBCandleSink",
				"removetethercandlenullvalues sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Column_1 as string,",
				"          Column_2 as string,",
				"          Column_3 as string,",
				"          Column_4 as string,",
				"          Column_5 as string",
				"     ),",
				"     filePattern:'USDT-USDcandle.csv',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> USDTCandleSink",
				"removexrpcandlenullvalues sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Column_1 as string,",
				"          Column_2 as string,",
				"          Column_3 as string,",
				"          Column_4 as string,",
				"          Column_5 as string",
				"     ),",
				"     filePattern:'XRP-USDcandle.csv',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> XRPCandleSink",
				"removelitecoincandlenullvalues sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Column_1 as string,",
				"          Column_2 as string,",
				"          Column_3 as string,",
				"          Column_4 as string,",
				"          Column_5 as string",
				"     ),",
				"     filePattern:'LTC-USDcandle.csv',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> LTCCandleSink",
				"removehexcandlenullvalues sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Column_1 as string,",
				"          Column_2 as string,",
				"          Column_3 as string,",
				"          Column_4 as string,",
				"          Column_5 as string",
				"     ),",
				"     filePattern:'HEX-USDcandle.csv',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> HEXCandleSink",
				"removeethcandlenullvalues sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Column_1 as string,",
				"          Column_2 as string,",
				"          Column_3 as string,",
				"          Column_4 as string,",
				"          Column_5 as string",
				"     ),",
				"     filePattern:'ETH-USDcandle.csv',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> ETHCandleSink",
				"Removedogecoincandlenullvalues sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Column_1 as string,",
				"          Column_2 as string,",
				"          Column_3 as string,",
				"          Column_4 as string,",
				"          Column_5 as string",
				"     ),",
				"     filePattern:'DOGE-USDcandle.csv',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> DOGECandleSink",
				"removebitcoinscandlenullvalues sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Column_1 as string,",
				"          Column_2 as string,",
				"          Column_3 as string,",
				"          Column_4 as string,",
				"          Column_5 as string",
				"     ),",
				"     filePattern:'BTC-USDcandle.csv',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> BTCCandleSink",
				"removebinancecandlenullvalues sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Column_1 as string,",
				"          Column_2 as string,",
				"          Column_3 as string,",
				"          Column_4 as string,",
				"          Column_5 as string",
				"     ),",
				"     filePattern:'BNB-USDcandle.csv',",
				"     truncate: true,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 1,",
				"     partitionBy('hash', 1)) ~> BNBCandleSink"
			]
		}
	}
}